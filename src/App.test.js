import {decrypt, encrypt, generate_pk} from "./utilities/CryptographicGoodies";
import {BigInteger} from "jsbn";
// SECRET KEY
// ,,0,0,0,0,0,0,0,0
let sk = "2380831451759006579882553120960984113277981577916531573623778541891671800956226624640322916414543030985934711395325938960305715079214976582052109890021687068"
let secretKey = "1890613122308636483214615263089879914353133622183312356168367195770925616569283503768300091983802355020338489773460540926699954929058171678498009622408788252"
let a = "61671566343345696731294016350859394680554511962137846448361883824513265616046052477252849445996314815865480076053796087197775823271593448481023737053690555693366935278797976276481862904213136852723844138492255953490156176168128410604225410474417172741677237403932277114828526096830191974771065145204813146133"
let b ="41086418043404831066851557990857705478472057190536551007345366474238131196958621587131526318502631597318294155414447261358447587216594254548384181158043424662707231885169684993693825318603237101844506108874188712546646906595375815913109281089236222724701158427049216910207166299985115880491232944327145943378"

test('cryptography', async () => {
  console.log(await decrypt(new BigInteger(secretKey),new BigInteger(a),new BigInteger(b)));
  expect(1).toBe(1)
});

test('key generation', async ()=>{
  let pk = generate_pk(sk);

  console.log("Public", pk.toString());

  let eData = await encrypt("0", new BigInteger(pk));
  console.log(eData)

  let dc = await decrypt(new BigInteger(sk), new BigInteger(a), new BigInteger(b));
  console.log(dc)
});

